generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String?
  passwordHash  String
  createdAt     DateTime      @default(now())
  contacts      Contact[]
  invoices      Invoice[]
  payments      Payment[]
  accounts      Account[]
  categories    Category[]
  ledgerEntries LedgerEntry[]
}

model Contact {
  id        Int         @id @default(autoincrement())
  userId    Int
  type      ContactType
  name      String
  email     String?
  phone     String?
  taxNo     String?
  address   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  payments Payment[]
  ledger   LedgerEntry[]
}

enum ContactType {
  CUSTOMER
  SUPPLIER
}

model Account {
  id        Int         @id @default(autoincrement())
  userId    Int
  name      String
  type      AccountType @default(CASH)
  currency  String      @default("USD")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]
}

enum AccountType {
  CASH
  BANK
}

model Category {
  id        Int          @id @default(autoincrement())
  userId    Int
  name      String
  type      CategoryType
  createdAt DateTime     @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  ledger   LedgerEntry[]
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Invoice {
  id         Int           @id @default(autoincrement())
  userId     Int
  contactId  Int
  categoryId Int?
  issueDate  DateTime
  dueDate    DateTime?
  number     String
  currency   String        @default("USD")
  subtotal   Decimal       @db.Decimal(12, 2)
  tax        Decimal       @default(0) @db.Decimal(12, 2)
  total      Decimal       @db.Decimal(12, 2)
  status     InvoiceStatus @default(DRAFT)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact  Contact   @relation(fields: [contactId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  payments Payment[]
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIAL
  PAID
  OVERDUE
}

model Payment {
  id        Int         @id @default(autoincrement())
  userId    Int
  contactId Int?
  invoiceId Int?
  accountId Int
  date      DateTime
  amount    Decimal     @db.Decimal(12, 2)
  currency  String      @default("USD")
  type      PaymentType
  notes     String?
  createdAt DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  account Account  @relation(fields: [accountId], references: [id])
}

enum PaymentType {
  INCOME
  EXPENSE
  COLLECTION
  OUTGOING
}

model LedgerEntry {
  id          Int      @id @default(autoincrement())
  userId      Int
  contactId   Int?
  categoryId  Int?
  date        DateTime
  description String
  debit       Decimal  @default(0) @db.Decimal(12, 2)
  credit      Decimal  @default(0) @db.Decimal(12, 2)
  currency    String   @default("USD")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact  Contact?  @relation(fields: [contactId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}
